//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: proto/hello.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf

/// 服务端接口类
///
/// Usage: instantiate `Grpc_GreeterClient`, then call methods of this protocol to make API calls.
protocol Grpc_GreeterClientProtocol: GRPCClient {
    var serviceName: String { get }
    var interceptors: Grpc_GreeterClientInterceptorFactoryProtocol? { get }

    func sayHello(
        _ request: Grpc_HelloRequest,
        callOptions: CallOptions?
    ) -> UnaryCall<Grpc_HelloRequest, Grpc_HelloReply>
}

extension Grpc_GreeterClientProtocol {
    var serviceName: String {
        return "grpc.Greeter"
    }

    /// Unary call to SayHello
    ///
    /// - Parameters:
    ///   - request: Request to send to SayHello.
    ///   - callOptions: Call options.
    /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
    func sayHello(
        _ request: Grpc_HelloRequest,
        callOptions: CallOptions? = nil
    ) -> UnaryCall<Grpc_HelloRequest, Grpc_HelloReply> {
        return makeUnaryCall(
            path: "/grpc.Greeter/SayHello",
            request: request,
            callOptions: callOptions ?? defaultCallOptions,
            interceptors: interceptors?.makeSayHelloInterceptors() ?? []
        )
    }
}

protocol Grpc_GreeterClientInterceptorFactoryProtocol {
    /// - Returns: Interceptors to use when invoking 'sayHello'.
    func makeSayHelloInterceptors() -> [ClientInterceptor<Grpc_HelloRequest, Grpc_HelloReply>]
}

final class Grpc_GreeterClient: Grpc_GreeterClientProtocol {
    let channel: GRPCChannel
    var defaultCallOptions: CallOptions
    var interceptors: Grpc_GreeterClientInterceptorFactoryProtocol?

    /// Creates a client for the grpc.Greeter service.
    ///
    /// - Parameters:
    ///   - channel: `GRPCChannel` to the service host.
    ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
    ///   - interceptors: A factory providing interceptors for each RPC.
    init(
        channel: GRPCChannel,
        defaultCallOptions: CallOptions = CallOptions(),
        interceptors: Grpc_GreeterClientInterceptorFactoryProtocol? = nil
    ) {
        self.channel = channel
        self.defaultCallOptions = defaultCallOptions
        self.interceptors = interceptors
    }
}
